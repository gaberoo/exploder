#include <stdlib.h>
#include <math.h>

/*
      SUBROUTINE DLACN1( N, T, V, X, LDX, XOLD, LDXOLD, WRK,
     $                   H, IND, INDH, EST, KASE, ISEED, INFO )
*
*     .. Scalar Arguments ..
      INTEGER            INFO, KASE, LDXOLD, LDX, N, T
      DOUBLE PRECISION   EST
*     ..
*     .. Array Arguments ..
      INTEGER            IND( * ), INDH( * ), ISEED( 4 )
      DOUBLE PRECISION   H( * ),  V( * ), X( LDX, * ), WRK( * ),
     $                   XOLD( LDXOLD, * )
*     ..
*
*  Purpose
*  =======
*
*  DLACN1 estimates the 1-norm of a square, real matrix A.
*  Reverse communication is used for evaluating matrix-matrix products.
*
*  Arguments
*  =========
*
*  N      (input) INTEGER
*         The order of the matrix.  N >= 1.
*
*  T      (input) INTEGER
*         The number of columns used at each step.
*
*  V      (output) DOUBLE PRECISION array, dimension (N).
*         On the final return, V = A*W,  where  EST = norm(V)/norm(W)
*         (W is not returned).
*
*  X      (input/output) DOUBLE PRECISION array, dimension (N,T)
*         On an intermediate return, X should be overwritten by
*               A * X,   if KASE=1,
*               A' * X,  if KASE=2,
*         and DLACN1 must be re-called with all the other parameters
*         unchanged.
*
*  LDX    (input) INTEGER
*         The leading dimension of X.  LDX >= max(1,N).
*
*  XOLD   (workspace) DOUBLE PRECISION array, dimension (N,T)
*
*  LDXOLD (input) INTEGER
*         The leading dimension of XOLD.  LDXOLD >= max(1,N).
*
*  WRK    (workspace) DOUBLE PRECISION array, dimension (T)
*
*  H      (workspace) DOUBLE PRECISION array, dimension (N)
*
*  IND    (workspace) INTEGER array, dimension (N)
*
*  INDH   (workspace) INTEGER array, dimension (N)
*
*  EST    (output) DOUBLE PRECISION
*         An estimate (a lower bound) for norm(A).
*
*  KASE   (input/output) INTEGER
*         On the initial call to DLACN1, KASE should be 0.
*         On an intermediate return, KASE will be 1 or 2, indicating
*         whether X should be overwritten by A * X  or A' * X.
*         On the final return from DLACN1, KASE will again be 0.
*
*  ISEED  (input/output) INTEGER array, dimension (4)
*          On entry, the seed of the random number generator; the array
*          elements must be between 0 and 4095, and ISEED(4) must be
*          odd.
*          On exit, the seed is updated.
*
*  INFO   (output) INTEGER
*         INFO describes how the iteration terminated:
*            INFO = 1: iteration limit reached.
*            INFO = 2: estimate not increased.
*            INFO = 3: repeated sign matrix.
*            INFO = 4: power method convergence test.
*            INFO = 5: repeated unit vectors.
*
*  ====================================================================
*/

/* BLAS routines */
int idamax_(int* n, double* x, int* incx);
double dasum_(int* n, double* x, int* incx);
double ddot_(int* n, double* x, int* incx, double* y, int* incy);
void dcopy_(int* n, double* x, int* intx, double* y, int* incy);
void dlacpy_(char* uplo, int* M, int* N, double* A, int* LDA, double* B, int* LDB);
void dlapst_(char* ID, int* N, double* D, int* INDX, int* INFO);
/* DLARNV returns a vector of n random real numbers from a uniform or 
 *  normal distribution. */
void dlarnv_(int* IDIST, int* ISEED, int* N, double* X);
void dlarpc_(int* N, int* T, double* X, int* LDX, double* XOLD, 
             int* LDXOLD, double* WRK, int* KASE, int* ISEED);
void dlascl_(char* TYPE, int* KL, int* KU, double* CFROM, double* CTO, 
             int* M, int* N, double* A, int* LDA, int* INFO);
int dgemv_(char* trans, int* m, int* n, double* alpha, 
           double* a, int* lda, double* x, int* incx, 
           double* beta, double* y, int* incy);

#define SIGN(A,B) (x >= 0) ? 1 : -1

int dlacn1(int n, int t, double* v, double* x, int ldx,
           double* xold, int ldxold, double* wrk, double* h, int* ind,
           int* indh, double est, int* kase, int* iseed)
{
  const int itmax = 5;

  int izero = 0;
  int ione = 1;
  int itwo = 2;
  char gee = 'G';

  double dzero = 0.0;
  double done = 1.0;
  double dtwo = 2.0;

  int i, ibest, itemp, iter, j, jump;
  double est_old = 0.0;
  double temp = 0.0;

  int info = 0;

  if (*kase == 0) {
    est_old = 0.0;
    iter = 1;
    itemp = 1;
    info = 0;

    for (i = 0; i < n; ++i) {
      x[i] = 1.0;
      ind[i] = i;
      indh[i] = 0;
    }

    for (j = 1; j < t; ++j) {
      // get uniform random number in [-1,1]
      dlarnv_(&itwo,iseed,&n,x+ldx*j);
      for (i = 0; i < n; ++i) {
        x[j*ldx+i] = (x[j*ldx+i] >= 0) ? 1.0 : -1.0;
      }
    }

    if (t > 1) {
      dlarpc_(&n,&t,x,&ldx,xold,&ldxold,wrk,kase,iseed);
    }

    int kl = 0;
    int ku = 0;
    double dn = (double) n;
    dlascl_(&gee,&kl,&ku,&dn,&done,&n,&t,x,&ldx,&info);

    *kase = 1;
    jump = 1;

    return info;
  }

  // GO TO ( 40, 100 ) JUMP

  /*     ................ ENTRY   (JUMP = 1)
   *     FIRST HALF OF THE ITERATION: X HAS BEEN OVERWRITTEN BY A*X.  */

  if (iter == 1 && n == 1) {
    v[0] = x[0];
    est = fabs(v[0]);
    *kase = 0;
    return info;
  }

  est = 0.0;

  for (j = 0; j < t; ++j) {
    temp = dasum_(&n,x+ldx*j,&ione);

    if (temp > est) {
      est = temp;
      itemp = j+1;
    }
  }

  if (est > est_old || iter == 2) {
    ibest = ind[itemp-1];
  }

  if (est < est_old && iter > 2) {
    est = est_old;
    info = 2;
    *kase = 0;
    return info;
  }

  est_old = est;
  dcopy_(&n,x+ldx*(itemp-1),&ione,v,&ione);

  if (iter > itmax) {
    info = 1;
    *kase = 0;
    return info;
  }

  for (j = 0; j < t; ++j) {
    for (i = 0; i < n; ++i) {
      x[j*ldx+i] = (x[j*ldx+i] >= 0) ? 1.0 : -1.0;
    }
  }

  if (iter > 1) {
    /* IF ALL COLUMNS of X PARALLEL TO XOLD, EXIT. */

    for (j = 0; j < t; ++j) {
      char trans = 'T';
      dgemv_(&trans,&n,&t,&done,xold,&ldxold,x+j*ldx,&ione,&dzero,wrk,&ione);
      int idx_max_abs = idamax_(&t,wrk,&ione);

      if ((int) round(fabs(wrk[idx_max_abs])) >= n) {
        info = 3;
        *kase = 0;
        return info;
      }
    }
    
    if (t > 1) {
      dlarpc_(&n,&t,x,&ldx,xold,&ldxold,wrk,kase,iseed);
    }
  } else {
    if (t > 1) {
      dlarpc_(&n,&t,x,&ldx,xold,&ldxold,wrk,kase,iseed);
    }
    char whole = 'W';
    dlacpy_(&whole,&n,&t,x,&ldx,xold,&ldxold);
    *kase = 2;
    jump = 2;
    return info;
  }

  /*     ................ ENTRY   (JUMP = 2)
   *     SECOND HALF OF THE ITERATION: 
   *                      X HAS BEEN OVERWRITTEN BY TRANSPOSE(A)*X. */

  for (i = 0; i < n; ++i) {
    int idx = idamax_(&t,x+i,&n);
    h[i] = fabs(x[idx*ldx+i]);
    ind[i] = i;
  }

    int idx = idamax_(&n,h,&ione);
  if (iter > 2 && h[idx] == h[ibest]) {
    info = 4;
    *kase = 0;
    return info;
  }


  /* Sort so that h(i) >= h(j) for i < j */
  char dee = 'D';
  dlapst_(&dee,&n,h,ind,&itemp);

  if (iter == 1) {
    itemp = t;
  } else {
    /* IF IND(1:T) IS CONTAINED IN INDH, TERMINATE. */
    if (t > 1) {
      for (j = 0; j < t; ++j) {
        for (i = 0; i < (iter-1)*t; ++i) {
          if (i > n || ind[j] == indh[i]) {
            info = 5;
            *kase = 0;
            return info;
          }
        }
      }
    }

    /* REPLACE IND(1:T) BY THE FIRST T INDICES IN IND THAT
     * ARE NOT IN INDH. */

    itemp = 1;
    int cont = 1;
    for (j = 0; j < n && cont; ++j) {
      for (i = 1; i < (iter-1)*t && cont; ++i) {
        if (i > n || ind[j] == indh[i]) {
          cont = 0;
          --itemp;
          break;
        } else {
          ind[itemp-1] = ind[j];
          if (itemp == t) { 
            cont = 0;
            // goto 170 
          }
          ++itemp;
        }
      }
    }
  }

  if ((iter-1)*t > n) {
    for (j = 1; j < itemp; ++j) {
      indh[(iter-1)*t+j] = ind[j];
    }
  }

  for (j = 0; j < t; ++j) {
    for (i = 0; i < n; ++i) {
      x[j*ldx+i] = 0.0;
    }
    x[ind[j],j] = 1.0;
  }

  ++iter;
  *kase = 1;
  jump = 1;

  return info;
}
